<UserControl x:Class="MaterialDesignDemo.Firm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MaterialDesignDemo"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:domain1="clr-namespace:MaterialDesignDemo.Domain"
             mc:Ignorable="d" 
            >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- note you only need bring in these extra resource dictionaries when using non-default styles, so only bring them into your controls where the default style is not what you want -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DataGrid.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Slider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type Viewbox}">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Margin" Value="0 0 8 0" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource MaterialDesignSlider}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type materialDesign:PackIcon}" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4 0 4 0" />
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <ScrollViewer Name="scrollViewer" MouseWheel="scrollViewer_MouseWheel">

        <StackPanel>
            <materialDesign:Snackbar IsActive="{Binding NotificationIsVisible,Mode=TwoWay}"  
                                              x:Name="NotificationSnackbar" >
                <materialDesign:SnackbarMessage  Content="{Binding NotificationContent,Mode=TwoWay}" ActionContent="Remove" ActionClick="SnackbarMessage_HideSnackClick" />
            </materialDesign:Snackbar>
            <GroupBox   Style="{DynamicResource MaterialDesignCardGroupBox}" Margin="16,0,16,16">
                <GroupBox.Header>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Horizontal" >
                        <materialDesign:PackIcon Kind="ImageArea" Height="32" Width="32" VerticalAlignment="Center" />
                        <TextBlock Margin="8,0,0,0" VerticalAlignment="Center" Style="{StaticResource MaterialDesignSubheadingTextBlock}" Text="Firm List" Foreground="White" FontWeight="Bold"/>
                    </StackPanel>
                        <StackPanel Orientation="Horizontal" Grid.ColumnSpan="2" >
                            <Button 
                    Style="{DynamicResource MaterialDesignRaisedAccentButton}" HorizontalAlignment="Right"
                    Margin="8"
                    materialDesign:ShadowAssist.ShadowDepth="Depth4"
                    ToolTip="New Firm" Command="{Binding AddItemClicked}" IsEnabled="{Binding IsButtonEnable,Mode=TwoWay}" >
                                New Firm
                            </Button>
                            <Button  Style="{DynamicResource MaterialDesignRaisedAccentButton}" HorizontalAlignment="Right" 
                    Margin="8"
                    materialDesign:ShadowAssist.ShadowDepth="Depth4"
                    ToolTip="Save" Command="{Binding SaveClicked}" IsEnabled="{Binding IsButtonEnable,Mode=TwoWay}">
                                Save
                            </Button>
                            <Button  Style="{DynamicResource MaterialDesignRaisedAccentButton}" HorizontalAlignment="Right"
                    Margin="8"
                    materialDesign:ShadowAssist.ShadowDepth="Depth4"
                    ToolTip="Refresh" Command="{Binding RefreshClicked}" IsEnabled="{Binding IsButtonEnable,Mode=TwoWay}">
                                Refresh
                            </Button>
                        </StackPanel>
                    </StackPanel>
                </GroupBox.Header>

                <DataGrid Name="grdfirm" Margin="0 8 0 0" ItemsSource="{Binding Firm,Mode=TwoWay}" CanUserSortColumns="True" CanUserAddRows="False" AutoGenerateColumns="False"
                      materialDesign:DataGridAssist.CellPadding="13 8 8 8" materialDesign:DataGridAssist.ColumnHeaderPadding="8">
                    <DataGrid.Columns>
                        <materialDesign:MaterialDataGridTextColumn Binding="{Binding Id,Mode=TwoWay}" 
                                            Header="Id"
                                 EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" 
                                            >

                        </materialDesign:MaterialDataGridTextColumn>
                        <!-- if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn -->
                        <DataGridTemplateColumn  Header="Name" Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox Grid.Row="1" Grid.Column="1" 
				    x:Name="NameTextBox"
				    materialDesign:HintAssist.Hint="Name">
                                        <TextBox.Text>
                                            <Binding Path="Name" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <domain1:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn  Header="Contact" Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox Grid.Row="1" Grid.Column="1" 
				    x:Name="NameTextBox"
				    materialDesign:HintAssist.Hint="Contact">
                                        <TextBox.Text>
                                            <Binding Path="Contact" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <domain1:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn  Header="Address" Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox Grid.Row="1" Grid.Column="1" 
				    x:Name="NameTextBox"
				    materialDesign:HintAssist.Hint="Address">
                                        <TextBox.Text>
                                            <Binding Path="Address" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <domain1:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn  Header="PhoneNo" Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox Grid.Row="1" Grid.Column="1" 
				    x:Name="NameTextBox"
				    materialDesign:HintAssist.Hint="PhoneNo">
                                        <TextBox.Text>
                                            <Binding Path="PhoneNo" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <domain1:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="ComputerButton_Click" CommandParameter="{Binding Id}"
                                            Style="{StaticResource MaterialDesignRaisedButton}" Margin="0 0 8 0"  ToolTip="Computer List">
                                        Computer List
                                    </Button>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Width="125">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>

                                    <Button Click="OperationListButton_Click" CommandParameter="{Binding Id}"
                                                    Style="{StaticResource MaterialDesignRaisedButton}" Margin="0 0 8 0"  ToolTip="Operation List">
                                        Operation List
                                    </Button>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="DeleteButton_Click"  CommandParameter="{Binding Id}"
                                                    Style="{StaticResource MaterialDesignRaisedButton}" Margin="0 0 8 0" ToolTip="Sil">
                                        <materialDesign:PackIcon Kind="Delete" Height="24" Width="24" />
                                    </Button>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
                        <!--<materialDesign:MaterialDataGridComboBoxColumn Header="Food"        
                                                                   SelectedValueBinding="{Binding Food}"-->
                        <!--ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}" />-->
                    </DataGrid.Columns>
                </DataGrid>
            </GroupBox>

        </StackPanel>
    </ScrollViewer>
</UserControl>
