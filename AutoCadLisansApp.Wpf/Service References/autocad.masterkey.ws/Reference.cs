//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LicenseController.autocad.masterkey.ws {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class UsersDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FirmDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class FirmDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact {
            get {
                return this.ContactField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactField, value) != true)) {
                    this.ContactField = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputerDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class ComputerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsComputerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRootMachineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PyshicalAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComputer {
            get {
                return this.IsComputerField;
            }
            set {
                if ((this.IsComputerField.Equals(value) != true)) {
                    this.IsComputerField = value;
                    this.RaisePropertyChanged("IsComputer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRootMachine {
            get {
                return this.IsRootMachineField;
            }
            set {
                if ((this.IsRootMachineField.Equals(value) != true)) {
                    this.IsRootMachineField = value;
                    this.RaisePropertyChanged("IsRootMachine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVisible {
            get {
                return this.IsVisibleField;
            }
            set {
                if ((this.IsVisibleField.Equals(value) != true)) {
                    this.IsVisibleField = value;
                    this.RaisePropertyChanged("IsVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PyshicalAddress {
            get {
                return this.PyshicalAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.PyshicalAddressField, value) != true)) {
                    this.PyshicalAddressField = value;
                    this.RaisePropertyChanged("PyshicalAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class OperationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ComputerCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LicenseController.autocad.masterkey.ws.FirmDTO FirmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ComputerCount {
            get {
                return this.ComputerCountField;
            }
            set {
                if ((this.ComputerCountField.Equals(value) != true)) {
                    this.ComputerCountField = value;
                    this.RaisePropertyChanged("ComputerCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LicenseController.autocad.masterkey.ws.FirmDTO Firm {
            get {
                return this.FirmField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmField, value) != true)) {
                    this.FirmField = value;
                    this.RaisePropertyChanged("Firm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckLicenseDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class CheckLicenseDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AppIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CheckDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComputerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InstallDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> InstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsFoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> LogIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OperationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UnInstallDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> UninstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AppId {
            get {
                return this.AppIdField;
            }
            set {
                if ((this.AppIdField.Equals(value) != true)) {
                    this.AppIdField = value;
                    this.RaisePropertyChanged("AppId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CheckDate {
            get {
                return this.CheckDateField;
            }
            set {
                if ((this.CheckDateField.Equals(value) != true)) {
                    this.CheckDateField = value;
                    this.RaisePropertyChanged("CheckDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComputerId {
            get {
                return this.ComputerIdField;
            }
            set {
                if ((this.ComputerIdField.Equals(value) != true)) {
                    this.ComputerIdField = value;
                    this.RaisePropertyChanged("ComputerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InstallDate {
            get {
                return this.InstallDateField;
            }
            set {
                if ((this.InstallDateField.Equals(value) != true)) {
                    this.InstallDateField = value;
                    this.RaisePropertyChanged("InstallDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Installed {
            get {
                return this.InstalledField;
            }
            set {
                if ((this.InstalledField.Equals(value) != true)) {
                    this.InstalledField = value;
                    this.RaisePropertyChanged("Installed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsFound {
            get {
                return this.IsFoundField;
            }
            set {
                if ((this.IsFoundField.Equals(value) != true)) {
                    this.IsFoundField = value;
                    this.RaisePropertyChanged("IsFound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> LogId {
            get {
                return this.LogIdField;
            }
            set {
                if ((this.LogIdField.Equals(value) != true)) {
                    this.LogIdField = value;
                    this.RaisePropertyChanged("LogId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OperationId {
            get {
                return this.OperationIdField;
            }
            set {
                if ((this.OperationIdField.Equals(value) != true)) {
                    this.OperationIdField = value;
                    this.RaisePropertyChanged("OperationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Output {
            get {
                return this.OutputField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputField, value) != true)) {
                    this.OutputField = value;
                    this.RaisePropertyChanged("Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UnInstallDate {
            get {
                return this.UnInstallDateField;
            }
            set {
                if ((this.UnInstallDateField.Equals(value) != true)) {
                    this.UnInstallDateField = value;
                    this.RaisePropertyChanged("UnInstallDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Uninstalled {
            get {
                return this.UninstalledField;
            }
            set {
                if ((this.UninstalledField.Equals(value) != true)) {
                    this.UninstalledField = value;
                    this.RaisePropertyChanged("Uninstalled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogData", Namespace="http://schemas.datacontract.org/2004/07/CheckLicense.Log")]
    [System.SerializableAttribute()]
    public partial class LogData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ComputerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ExpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LevelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LicenseController.autocad.masterkey.ws.LogDataType LogDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LogIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReqXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LicenseController.autocad.masterkey.ws.LogDataState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ComputerId {
            get {
                return this.ComputerIdField;
            }
            set {
                if ((this.ComputerIdField.Equals(value) != true)) {
                    this.ComputerIdField = value;
                    this.RaisePropertyChanged("ComputerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ExpId {
            get {
                return this.ExpIdField;
            }
            set {
                if ((this.ExpIdField.Equals(value) != true)) {
                    this.ExpIdField = value;
                    this.RaisePropertyChanged("ExpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LevelId {
            get {
                return this.LevelIdField;
            }
            set {
                if ((this.LevelIdField.Equals(value) != true)) {
                    this.LevelIdField = value;
                    this.RaisePropertyChanged("LevelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LicenseController.autocad.masterkey.ws.LogDataType LogDataType {
            get {
                return this.LogDataTypeField;
            }
            set {
                if ((this.LogDataTypeField.Equals(value) != true)) {
                    this.LogDataTypeField = value;
                    this.RaisePropertyChanged("LogDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LogId {
            get {
                return this.LogIdField;
            }
            set {
                if ((this.LogIdField.Equals(value) != true)) {
                    this.LogIdField = value;
                    this.RaisePropertyChanged("LogId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperationId {
            get {
                return this.OperationIdField;
            }
            set {
                if ((this.OperationIdField.Equals(value) != true)) {
                    this.OperationIdField = value;
                    this.RaisePropertyChanged("OperationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReqXml {
            get {
                return this.ReqXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ReqXmlField, value) != true)) {
                    this.ReqXmlField = value;
                    this.RaisePropertyChanged("ReqXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResXml {
            get {
                return this.ResXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ResXmlField, value) != true)) {
                    this.ResXmlField = value;
                    this.RaisePropertyChanged("ResXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LicenseController.autocad.masterkey.ws.LogDataState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogDataType", Namespace="http://schemas.datacontract.org/2004/07/CheckLicense.Log")]
    public enum LogDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InitiliazeProcess = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InitiliazeItemOfProcess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateItemOfProcess = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateProcess = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogDataState", Namespace="http://schemas.datacontract.org/2004/07/CheckLicense.Log")]
    public enum LogDataState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fail = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlPointDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class ControlPointDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvgExecTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> WillCheckedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvgExecTime {
            get {
                return this.AvgExecTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.AvgExecTimeField, value) != true)) {
                    this.AvgExecTimeField = value;
                    this.RaisePropertyChanged("AvgExecTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> WillChecked {
            get {
                return this.WillCheckedField;
            }
            set {
                if ((this.WillCheckedField.Equals(value) != true)) {
                    this.WillCheckedField = value;
                    this.RaisePropertyChanged("WillChecked");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoftwareDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class SoftwareDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEnableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsEnable {
            get {
                return this.IsEnableField;
            }
            set {
                if ((this.IsEnableField.Equals(value) != true)) {
                    this.IsEnableField = value;
                    this.RaisePropertyChanged("IsEnable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FE_ControlListDTO", Namespace="http://schemas.datacontract.org/2004/07/LicenseControllerWs.DAL")]
    [System.SerializableAttribute()]
    public partial class FE_ControlListDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AppIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DriveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AppId {
            get {
                return this.AppIdField;
            }
            set {
                if ((this.AppIdField.Equals(value) != true)) {
                    this.AppIdField = value;
                    this.RaisePropertyChanged("AppId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Drive {
            get {
                return this.DriveField;
            }
            set {
                if ((object.ReferenceEquals(this.DriveField, value) != true)) {
                    this.DriveField = value;
                    this.RaisePropertyChanged("Drive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="autocad.masterkey.ws.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        LicenseController.autocad.masterkey.ws.UsersDTO Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.UsersDTO> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmUpsert", ReplyAction="http://tempuri.org/IService1/FirmUpsertResponse")]
        void FirmUpsert(LicenseController.autocad.masterkey.ws.FirmDTO firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmUpsert", ReplyAction="http://tempuri.org/IService1/FirmUpsertResponse")]
        System.Threading.Tasks.Task FirmUpsertAsync(LicenseController.autocad.masterkey.ws.FirmDTO firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmGet", ReplyAction="http://tempuri.org/IService1/FirmGetResponse")]
        LicenseController.autocad.masterkey.ws.FirmDTO FirmGet(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmGet", ReplyAction="http://tempuri.org/IService1/FirmGetResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FirmDTO> FirmGetAsync(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmList", ReplyAction="http://tempuri.org/IService1/FirmListResponse")]
        LicenseController.autocad.masterkey.ws.FirmDTO[] FirmList(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmList", ReplyAction="http://tempuri.org/IService1/FirmListResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FirmDTO[]> FirmListAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmDelete", ReplyAction="http://tempuri.org/IService1/FirmDeleteResponse")]
        void FirmDelete(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmDelete", ReplyAction="http://tempuri.org/IService1/FirmDeleteResponse")]
        System.Threading.Tasks.Task FirmDeleteAsync(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmUpdate", ReplyAction="http://tempuri.org/IService1/FirmUpdateResponse")]
        void FirmUpdate(LicenseController.autocad.masterkey.ws.FirmDTO firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FirmUpdate", ReplyAction="http://tempuri.org/IService1/FirmUpdateResponse")]
        System.Threading.Tasks.Task FirmUpdateAsync(LicenseController.autocad.masterkey.ws.FirmDTO firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputersUpsert", ReplyAction="http://tempuri.org/IService1/ComputersUpsertResponse")]
        string ComputersUpsert(LicenseController.autocad.masterkey.ws.ComputerDTO[] c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputersUpsert", ReplyAction="http://tempuri.org/IService1/ComputersUpsertResponse")]
        System.Threading.Tasks.Task<string> ComputersUpsertAsync(LicenseController.autocad.masterkey.ws.ComputerDTO[] c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerUpsert", ReplyAction="http://tempuri.org/IService1/ComputerUpsertResponse")]
        int ComputerUpsert(LicenseController.autocad.masterkey.ws.ComputerDTO c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerUpsert", ReplyAction="http://tempuri.org/IService1/ComputerUpsertResponse")]
        System.Threading.Tasks.Task<int> ComputerUpsertAsync(LicenseController.autocad.masterkey.ws.ComputerDTO c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationGet", ReplyAction="http://tempuri.org/IService1/OperationGetResponse")]
        LicenseController.autocad.masterkey.ws.OperationDTO OperationGet(int opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationGet", ReplyAction="http://tempuri.org/IService1/OperationGetResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO> OperationGetAsync(int opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerListAll", ReplyAction="http://tempuri.org/IService1/ComputerListAllResponse")]
        LicenseController.autocad.masterkey.ws.ComputerDTO[] ComputerListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerListAll", ReplyAction="http://tempuri.org/IService1/ComputerListAllResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ComputerDTO[]> ComputerListAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerList", ReplyAction="http://tempuri.org/IService1/ComputerListResponse")]
        LicenseController.autocad.masterkey.ws.ComputerDTO[] ComputerList(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerList", ReplyAction="http://tempuri.org/IService1/ComputerListResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ComputerDTO[]> ComputerListAsync(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerDelete", ReplyAction="http://tempuri.org/IService1/ComputerDeleteResponse")]
        void ComputerDelete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerDelete", ReplyAction="http://tempuri.org/IService1/ComputerDeleteResponse")]
        System.Threading.Tasks.Task ComputerDeleteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerUpdate", ReplyAction="http://tempuri.org/IService1/ComputerUpdateResponse")]
        void ComputerUpdate(LicenseController.autocad.masterkey.ws.ComputerDTO comp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerUpdate", ReplyAction="http://tempuri.org/IService1/ComputerUpdateResponse")]
        System.Threading.Tasks.Task ComputerUpdateAsync(LicenseController.autocad.masterkey.ws.ComputerDTO comp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationUpsert", ReplyAction="http://tempuri.org/IService1/OperationUpsertResponse")]
        void OperationUpsert(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationUpsert", ReplyAction="http://tempuri.org/IService1/OperationUpsertResponse")]
        System.Threading.Tasks.Task OperationUpsertAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationListAll", ReplyAction="http://tempuri.org/IService1/OperationListAllResponse")]
        LicenseController.autocad.masterkey.ws.OperationDTO[] OperationListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationListAll", ReplyAction="http://tempuri.org/IService1/OperationListAllResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO[]> OperationListAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationList", ReplyAction="http://tempuri.org/IService1/OperationListResponse")]
        LicenseController.autocad.masterkey.ws.OperationDTO[] OperationList(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationList", ReplyAction="http://tempuri.org/IService1/OperationListResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO[]> OperationListAsync(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationDelete", ReplyAction="http://tempuri.org/IService1/OperationDeleteResponse")]
        void OperationDelete(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationDelete", ReplyAction="http://tempuri.org/IService1/OperationDeleteResponse")]
        System.Threading.Tasks.Task OperationDeleteAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationUpdate", ReplyAction="http://tempuri.org/IService1/OperationUpdateResponse")]
        void OperationUpdate(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperationUpdate", ReplyAction="http://tempuri.org/IService1/OperationUpdateResponse")]
        System.Threading.Tasks.Task OperationUpdateAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseUpsert", ReplyAction="http://tempuri.org/IService1/CheckLicenseUpsertResponse")]
        void CheckLicenseUpsert(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseUpsert", ReplyAction="http://tempuri.org/IService1/CheckLicenseUpsertResponse")]
        System.Threading.Tasks.Task CheckLicenseUpsertAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogToDb", ReplyAction="http://tempuri.org/IService1/LogToDbResponse")]
        void LogToDb(LicenseController.autocad.masterkey.ws.LogData[] logs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogToDb", ReplyAction="http://tempuri.org/IService1/LogToDbResponse")]
        System.Threading.Tasks.Task LogToDbAsync(LicenseController.autocad.masterkey.ws.LogData[] logs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseList", ReplyAction="http://tempuri.org/IService1/CheckLicenseListResponse")]
        LicenseController.autocad.masterkey.ws.CheckLicenseDTO[] CheckLicenseList(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseList", ReplyAction="http://tempuri.org/IService1/CheckLicenseListResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.CheckLicenseDTO[]> CheckLicenseListAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseDelete", ReplyAction="http://tempuri.org/IService1/CheckLicenseDeleteResponse")]
        void CheckLicenseDelete(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseDelete", ReplyAction="http://tempuri.org/IService1/CheckLicenseDeleteResponse")]
        System.Threading.Tasks.Task CheckLicenseDeleteAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseUpdate", ReplyAction="http://tempuri.org/IService1/CheckLicenseUpdateResponse")]
        void CheckLicenseUpdate(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseUpdate", ReplyAction="http://tempuri.org/IService1/CheckLicenseUpdateResponse")]
        System.Threading.Tasks.Task CheckLicenseUpdateAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerDeleteAllBaseFormid", ReplyAction="http://tempuri.org/IService1/ComputerDeleteAllBaseFormidResponse")]
        void ComputerDeleteAllBaseFormid(int firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ComputerDeleteAllBaseFormid", ReplyAction="http://tempuri.org/IService1/ComputerDeleteAllBaseFormidResponse")]
        System.Threading.Tasks.Task ComputerDeleteAllBaseFormidAsync(int firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseDeleteAllBaseOperationid", ReplyAction="http://tempuri.org/IService1/CheckLicenseDeleteAllBaseOperationidResponse")]
        void CheckLicenseDeleteAllBaseOperationid(int oprId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckLicenseDeleteAllBaseOperationid", ReplyAction="http://tempuri.org/IService1/CheckLicenseDeleteAllBaseOperationidResponse")]
        System.Threading.Tasks.Task CheckLicenseDeleteAllBaseOperationidAsync(int oprId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetControlPoint", ReplyAction="http://tempuri.org/IService1/GetControlPointResponse")]
        LicenseController.autocad.masterkey.ws.ControlPointDTO[] GetControlPoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetControlPoint", ReplyAction="http://tempuri.org/IService1/GetControlPointResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ControlPointDTO[]> GetControlPointAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApplication", ReplyAction="http://tempuri.org/IService1/GetAllApplicationResponse")]
        LicenseController.autocad.masterkey.ws.SoftwareDTO[] GetAllApplication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllApplication", ReplyAction="http://tempuri.org/IService1/GetAllApplicationResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.SoftwareDTO[]> GetAllApplicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFEControlList", ReplyAction="http://tempuri.org/IService1/GetFEControlListResponse")]
        LicenseController.autocad.masterkey.ws.FE_ControlListDTO[] GetFEControlList(int appid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFEControlList", ReplyAction="http://tempuri.org/IService1/GetFEControlListResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FE_ControlListDTO[]> GetFEControlListAsync(int appid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApplication", ReplyAction="http://tempuri.org/IService1/GetApplicationResponse")]
        LicenseController.autocad.masterkey.ws.SoftwareDTO GetApplication(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApplication", ReplyAction="http://tempuri.org/IService1/GetApplicationResponse")]
        System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.SoftwareDTO> GetApplicationAsync(System.Nullable<int> id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LicenseController.autocad.masterkey.ws.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LicenseController.autocad.masterkey.ws.IService1>, LicenseController.autocad.masterkey.ws.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LicenseController.autocad.masterkey.ws.UsersDTO Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.UsersDTO> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void FirmUpsert(LicenseController.autocad.masterkey.ws.FirmDTO firm) {
            base.Channel.FirmUpsert(firm);
        }
        
        public System.Threading.Tasks.Task FirmUpsertAsync(LicenseController.autocad.masterkey.ws.FirmDTO firm) {
            return base.Channel.FirmUpsertAsync(firm);
        }
        
        public LicenseController.autocad.masterkey.ws.FirmDTO FirmGet(System.Nullable<int> firmId) {
            return base.Channel.FirmGet(firmId);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FirmDTO> FirmGetAsync(System.Nullable<int> firmId) {
            return base.Channel.FirmGetAsync(firmId);
        }
        
        public LicenseController.autocad.masterkey.ws.FirmDTO[] FirmList(int userid) {
            return base.Channel.FirmList(userid);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FirmDTO[]> FirmListAsync(int userid) {
            return base.Channel.FirmListAsync(userid);
        }
        
        public void FirmDelete(int firmid) {
            base.Channel.FirmDelete(firmid);
        }
        
        public System.Threading.Tasks.Task FirmDeleteAsync(int firmid) {
            return base.Channel.FirmDeleteAsync(firmid);
        }
        
        public void FirmUpdate(LicenseController.autocad.masterkey.ws.FirmDTO firm) {
            base.Channel.FirmUpdate(firm);
        }
        
        public System.Threading.Tasks.Task FirmUpdateAsync(LicenseController.autocad.masterkey.ws.FirmDTO firm) {
            return base.Channel.FirmUpdateAsync(firm);
        }
        
        public string ComputersUpsert(LicenseController.autocad.masterkey.ws.ComputerDTO[] c) {
            return base.Channel.ComputersUpsert(c);
        }
        
        public System.Threading.Tasks.Task<string> ComputersUpsertAsync(LicenseController.autocad.masterkey.ws.ComputerDTO[] c) {
            return base.Channel.ComputersUpsertAsync(c);
        }
        
        public int ComputerUpsert(LicenseController.autocad.masterkey.ws.ComputerDTO c) {
            return base.Channel.ComputerUpsert(c);
        }
        
        public System.Threading.Tasks.Task<int> ComputerUpsertAsync(LicenseController.autocad.masterkey.ws.ComputerDTO c) {
            return base.Channel.ComputerUpsertAsync(c);
        }
        
        public LicenseController.autocad.masterkey.ws.OperationDTO OperationGet(int opr) {
            return base.Channel.OperationGet(opr);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO> OperationGetAsync(int opr) {
            return base.Channel.OperationGetAsync(opr);
        }
        
        public LicenseController.autocad.masterkey.ws.ComputerDTO[] ComputerListAll() {
            return base.Channel.ComputerListAll();
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ComputerDTO[]> ComputerListAllAsync() {
            return base.Channel.ComputerListAllAsync();
        }
        
        public LicenseController.autocad.masterkey.ws.ComputerDTO[] ComputerList(System.Nullable<int> firmId) {
            return base.Channel.ComputerList(firmId);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ComputerDTO[]> ComputerListAsync(System.Nullable<int> firmId) {
            return base.Channel.ComputerListAsync(firmId);
        }
        
        public void ComputerDelete(int Id) {
            base.Channel.ComputerDelete(Id);
        }
        
        public System.Threading.Tasks.Task ComputerDeleteAsync(int Id) {
            return base.Channel.ComputerDeleteAsync(Id);
        }
        
        public void ComputerUpdate(LicenseController.autocad.masterkey.ws.ComputerDTO comp) {
            base.Channel.ComputerUpdate(comp);
        }
        
        public System.Threading.Tasks.Task ComputerUpdateAsync(LicenseController.autocad.masterkey.ws.ComputerDTO comp) {
            return base.Channel.ComputerUpdateAsync(comp);
        }
        
        public void OperationUpsert(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            base.Channel.OperationUpsert(opr);
        }
        
        public System.Threading.Tasks.Task OperationUpsertAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            return base.Channel.OperationUpsertAsync(opr);
        }
        
        public LicenseController.autocad.masterkey.ws.OperationDTO[] OperationListAll() {
            return base.Channel.OperationListAll();
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO[]> OperationListAllAsync() {
            return base.Channel.OperationListAllAsync();
        }
        
        public LicenseController.autocad.masterkey.ws.OperationDTO[] OperationList(int firmid) {
            return base.Channel.OperationList(firmid);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.OperationDTO[]> OperationListAsync(int firmid) {
            return base.Channel.OperationListAsync(firmid);
        }
        
        public void OperationDelete(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            base.Channel.OperationDelete(opr);
        }
        
        public System.Threading.Tasks.Task OperationDeleteAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            return base.Channel.OperationDeleteAsync(opr);
        }
        
        public void OperationUpdate(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            base.Channel.OperationUpdate(opr);
        }
        
        public System.Threading.Tasks.Task OperationUpdateAsync(LicenseController.autocad.masterkey.ws.OperationDTO opr) {
            return base.Channel.OperationUpdateAsync(opr);
        }
        
        public void CheckLicenseUpsert(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            base.Channel.CheckLicenseUpsert(oprdetail);
        }
        
        public System.Threading.Tasks.Task CheckLicenseUpsertAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            return base.Channel.CheckLicenseUpsertAsync(oprdetail);
        }
        
        public void LogToDb(LicenseController.autocad.masterkey.ws.LogData[] logs) {
            base.Channel.LogToDb(logs);
        }
        
        public System.Threading.Tasks.Task LogToDbAsync(LicenseController.autocad.masterkey.ws.LogData[] logs) {
            return base.Channel.LogToDbAsync(logs);
        }
        
        public LicenseController.autocad.masterkey.ws.CheckLicenseDTO[] CheckLicenseList(int id) {
            return base.Channel.CheckLicenseList(id);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.CheckLicenseDTO[]> CheckLicenseListAsync(int id) {
            return base.Channel.CheckLicenseListAsync(id);
        }
        
        public void CheckLicenseDelete(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            base.Channel.CheckLicenseDelete(oprdetail);
        }
        
        public System.Threading.Tasks.Task CheckLicenseDeleteAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            return base.Channel.CheckLicenseDeleteAsync(oprdetail);
        }
        
        public void CheckLicenseUpdate(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            base.Channel.CheckLicenseUpdate(oprdetail);
        }
        
        public System.Threading.Tasks.Task CheckLicenseUpdateAsync(LicenseController.autocad.masterkey.ws.CheckLicenseDTO oprdetail) {
            return base.Channel.CheckLicenseUpdateAsync(oprdetail);
        }
        
        public void ComputerDeleteAllBaseFormid(int firmId) {
            base.Channel.ComputerDeleteAllBaseFormid(firmId);
        }
        
        public System.Threading.Tasks.Task ComputerDeleteAllBaseFormidAsync(int firmId) {
            return base.Channel.ComputerDeleteAllBaseFormidAsync(firmId);
        }
        
        public void CheckLicenseDeleteAllBaseOperationid(int oprId) {
            base.Channel.CheckLicenseDeleteAllBaseOperationid(oprId);
        }
        
        public System.Threading.Tasks.Task CheckLicenseDeleteAllBaseOperationidAsync(int oprId) {
            return base.Channel.CheckLicenseDeleteAllBaseOperationidAsync(oprId);
        }
        
        public LicenseController.autocad.masterkey.ws.ControlPointDTO[] GetControlPoint() {
            return base.Channel.GetControlPoint();
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.ControlPointDTO[]> GetControlPointAsync() {
            return base.Channel.GetControlPointAsync();
        }
        
        public LicenseController.autocad.masterkey.ws.SoftwareDTO[] GetAllApplication() {
            return base.Channel.GetAllApplication();
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.SoftwareDTO[]> GetAllApplicationAsync() {
            return base.Channel.GetAllApplicationAsync();
        }
        
        public LicenseController.autocad.masterkey.ws.FE_ControlListDTO[] GetFEControlList(int appid) {
            return base.Channel.GetFEControlList(appid);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.FE_ControlListDTO[]> GetFEControlListAsync(int appid) {
            return base.Channel.GetFEControlListAsync(appid);
        }
        
        public LicenseController.autocad.masterkey.ws.SoftwareDTO GetApplication(System.Nullable<int> id) {
            return base.Channel.GetApplication(id);
        }
        
        public System.Threading.Tasks.Task<LicenseController.autocad.masterkey.ws.SoftwareDTO> GetApplicationAsync(System.Nullable<int> id) {
            return base.Channel.GetApplicationAsync(id);
        }
    }
}
