//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MaterialDesignDemo.autocad.masterkey.ws {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Firm", Namespace="http://schemas.datacontract.org/2004/07/AutoCadWs")]
    [System.SerializableAttribute()]
    public partial class Firm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact {
            get {
                return this.ContactField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactField, value) != true)) {
                    this.ContactField = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Computer", Namespace="http://schemas.datacontract.org/2004/07/AutoCadWs")]
    [System.SerializableAttribute()]
    public partial class Computer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsComputerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRootMachineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PyshicalAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComputer {
            get {
                return this.IsComputerField;
            }
            set {
                if ((this.IsComputerField.Equals(value) != true)) {
                    this.IsComputerField = value;
                    this.RaisePropertyChanged("IsComputer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRootMachine {
            get {
                return this.IsRootMachineField;
            }
            set {
                if ((this.IsRootMachineField.Equals(value) != true)) {
                    this.IsRootMachineField = value;
                    this.RaisePropertyChanged("IsRootMachine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVisible {
            get {
                return this.IsVisibleField;
            }
            set {
                if ((this.IsVisibleField.Equals(value) != true)) {
                    this.IsVisibleField = value;
                    this.RaisePropertyChanged("IsVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PyshicalAddress {
            get {
                return this.PyshicalAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.PyshicalAddressField, value) != true)) {
                    this.PyshicalAddressField = value;
                    this.RaisePropertyChanged("PyshicalAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Operation", Namespace="http://schemas.datacontract.org/2004/07/AutoCadWs")]
    [System.SerializableAttribute()]
    public partial class Operation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MaterialDesignDemo.autocad.masterkey.ws.Firm FirmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MaterialDesignDemo.autocad.masterkey.ws.Firm Firm {
            get {
                return this.FirmField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmField, value) != true)) {
                    this.FirmField = value;
                    this.RaisePropertyChanged("Firm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckLicense", Namespace="http://schemas.datacontract.org/2004/07/AutoCadWs")]
    [System.SerializableAttribute()]
    public partial class CheckLicense : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CheckDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComputerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IsUnlicensedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OperationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CheckDate {
            get {
                return this.CheckDateField;
            }
            set {
                if ((this.CheckDateField.Equals(value) != true)) {
                    this.CheckDateField = value;
                    this.RaisePropertyChanged("CheckDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComputerId {
            get {
                return this.ComputerIdField;
            }
            set {
                if ((this.ComputerIdField.Equals(value) != true)) {
                    this.ComputerIdField = value;
                    this.RaisePropertyChanged("ComputerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IsUnlicensed {
            get {
                return this.IsUnlicensedField;
            }
            set {
                if ((this.IsUnlicensedField.Equals(value) != true)) {
                    this.IsUnlicensedField = value;
                    this.RaisePropertyChanged("IsUnlicensed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OperationId {
            get {
                return this.OperationIdField;
            }
            set {
                if ((this.OperationIdField.Equals(value) != true)) {
                    this.OperationIdField = value;
                    this.RaisePropertyChanged("OperationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Output {
            get {
                return this.OutputField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputField, value) != true)) {
                    this.OutputField = value;
                    this.RaisePropertyChanged("Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="autocad.masterkey.ws.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertFirm", ReplyAction="http://tempuri.org/IService1/UpsertFirmResponse")]
        void UpsertFirm(MaterialDesignDemo.autocad.masterkey.ws.Firm firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertFirm", ReplyAction="http://tempuri.org/IService1/UpsertFirmResponse")]
        System.Threading.Tasks.Task UpsertFirmAsync(MaterialDesignDemo.autocad.masterkey.ws.Firm firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFirm", ReplyAction="http://tempuri.org/IService1/GetFirmResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Firm GetFirm(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFirm", ReplyAction="http://tempuri.org/IService1/GetFirmResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Firm> GetFirmAsync(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListFirm", ReplyAction="http://tempuri.org/IService1/ListFirmResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Firm[] ListFirm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListFirm", ReplyAction="http://tempuri.org/IService1/ListFirmResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Firm[]> ListFirmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFirm", ReplyAction="http://tempuri.org/IService1/DeleteFirmResponse")]
        void DeleteFirm(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFirm", ReplyAction="http://tempuri.org/IService1/DeleteFirmResponse")]
        System.Threading.Tasks.Task DeleteFirmAsync(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFirm", ReplyAction="http://tempuri.org/IService1/UpdateFirmResponse")]
        void UpdateFirm(MaterialDesignDemo.autocad.masterkey.ws.Firm firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFirm", ReplyAction="http://tempuri.org/IService1/UpdateFirmResponse")]
        System.Threading.Tasks.Task UpdateFirmAsync(MaterialDesignDemo.autocad.masterkey.ws.Firm firm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertComputer", ReplyAction="http://tempuri.org/IService1/UpsertComputerResponse")]
        void UpsertComputer(MaterialDesignDemo.autocad.masterkey.ws.Computer c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertComputer", ReplyAction="http://tempuri.org/IService1/UpsertComputerResponse")]
        System.Threading.Tasks.Task UpsertComputerAsync(MaterialDesignDemo.autocad.masterkey.ws.Computer c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOperation", ReplyAction="http://tempuri.org/IService1/GetOperationResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Operation GetOperation(int opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOperation", ReplyAction="http://tempuri.org/IService1/GetOperationResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation> GetOperationAsync(int opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListAllComputer", ReplyAction="http://tempuri.org/IService1/ListAllComputerResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Computer[] ListAllComputer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListAllComputer", ReplyAction="http://tempuri.org/IService1/ListAllComputerResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Computer[]> ListAllComputerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListComputer", ReplyAction="http://tempuri.org/IService1/ListComputerResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Computer[] ListComputer(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListComputer", ReplyAction="http://tempuri.org/IService1/ListComputerResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Computer[]> ListComputerAsync(System.Nullable<int> firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteComputer", ReplyAction="http://tempuri.org/IService1/DeleteComputerResponse")]
        void DeleteComputer(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteComputer", ReplyAction="http://tempuri.org/IService1/DeleteComputerResponse")]
        System.Threading.Tasks.Task DeleteComputerAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateComputer", ReplyAction="http://tempuri.org/IService1/UpdateComputerResponse")]
        void UpdateComputer(MaterialDesignDemo.autocad.masterkey.ws.Computer comp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateComputer", ReplyAction="http://tempuri.org/IService1/UpdateComputerResponse")]
        System.Threading.Tasks.Task UpdateComputerAsync(MaterialDesignDemo.autocad.masterkey.ws.Computer comp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertOperation", ReplyAction="http://tempuri.org/IService1/UpsertOperationResponse")]
        void UpsertOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertOperation", ReplyAction="http://tempuri.org/IService1/UpsertOperationResponse")]
        System.Threading.Tasks.Task UpsertOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListAllOperation", ReplyAction="http://tempuri.org/IService1/ListAllOperationResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Operation[] ListAllOperation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListAllOperation", ReplyAction="http://tempuri.org/IService1/ListAllOperationResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation[]> ListAllOperationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListOperation", ReplyAction="http://tempuri.org/IService1/ListOperationResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.Operation[] ListOperation(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListOperation", ReplyAction="http://tempuri.org/IService1/ListOperationResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation[]> ListOperationAsync(int firmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOperation", ReplyAction="http://tempuri.org/IService1/DeleteOperationResponse")]
        void DeleteOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteOperation", ReplyAction="http://tempuri.org/IService1/DeleteOperationResponse")]
        System.Threading.Tasks.Task DeleteOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOperation", ReplyAction="http://tempuri.org/IService1/UpdateOperationResponse")]
        void UpdateOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOperation", ReplyAction="http://tempuri.org/IService1/UpdateOperationResponse")]
        System.Threading.Tasks.Task UpdateOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertCheckLicense", ReplyAction="http://tempuri.org/IService1/UpsertCheckLicenseResponse")]
        void UpsertCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpsertCheckLicense", ReplyAction="http://tempuri.org/IService1/UpsertCheckLicenseResponse")]
        System.Threading.Tasks.Task UpsertCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListCheckLicense", ReplyAction="http://tempuri.org/IService1/ListCheckLicenseResponse")]
        MaterialDesignDemo.autocad.masterkey.ws.CheckLicense[] ListCheckLicense();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListCheckLicense", ReplyAction="http://tempuri.org/IService1/ListCheckLicenseResponse")]
        System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.CheckLicense[]> ListCheckLicenseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCheckLicense", ReplyAction="http://tempuri.org/IService1/DeleteCheckLicenseResponse")]
        void DeleteCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCheckLicense", ReplyAction="http://tempuri.org/IService1/DeleteCheckLicenseResponse")]
        System.Threading.Tasks.Task DeleteCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCheckLicense", ReplyAction="http://tempuri.org/IService1/UpdateCheckLicenseResponse")]
        void UpdateCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCheckLicense", ReplyAction="http://tempuri.org/IService1/UpdateCheckLicenseResponse")]
        System.Threading.Tasks.Task UpdateCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllComputerBaseFormid", ReplyAction="http://tempuri.org/IService1/DeleteAllComputerBaseFormidResponse")]
        void DeleteAllComputerBaseFormid(int firmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllComputerBaseFormid", ReplyAction="http://tempuri.org/IService1/DeleteAllComputerBaseFormidResponse")]
        System.Threading.Tasks.Task DeleteAllComputerBaseFormidAsync(int firmId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MaterialDesignDemo.autocad.masterkey.ws.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MaterialDesignDemo.autocad.masterkey.ws.IService1>, MaterialDesignDemo.autocad.masterkey.ws.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UpsertFirm(MaterialDesignDemo.autocad.masterkey.ws.Firm firm) {
            base.Channel.UpsertFirm(firm);
        }
        
        public System.Threading.Tasks.Task UpsertFirmAsync(MaterialDesignDemo.autocad.masterkey.ws.Firm firm) {
            return base.Channel.UpsertFirmAsync(firm);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Firm GetFirm(System.Nullable<int> firmId) {
            return base.Channel.GetFirm(firmId);
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Firm> GetFirmAsync(System.Nullable<int> firmId) {
            return base.Channel.GetFirmAsync(firmId);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Firm[] ListFirm() {
            return base.Channel.ListFirm();
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Firm[]> ListFirmAsync() {
            return base.Channel.ListFirmAsync();
        }
        
        public void DeleteFirm(int firmid) {
            base.Channel.DeleteFirm(firmid);
        }
        
        public System.Threading.Tasks.Task DeleteFirmAsync(int firmid) {
            return base.Channel.DeleteFirmAsync(firmid);
        }
        
        public void UpdateFirm(MaterialDesignDemo.autocad.masterkey.ws.Firm firm) {
            base.Channel.UpdateFirm(firm);
        }
        
        public System.Threading.Tasks.Task UpdateFirmAsync(MaterialDesignDemo.autocad.masterkey.ws.Firm firm) {
            return base.Channel.UpdateFirmAsync(firm);
        }
        
        public void UpsertComputer(MaterialDesignDemo.autocad.masterkey.ws.Computer c) {
            base.Channel.UpsertComputer(c);
        }
        
        public System.Threading.Tasks.Task UpsertComputerAsync(MaterialDesignDemo.autocad.masterkey.ws.Computer c) {
            return base.Channel.UpsertComputerAsync(c);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Operation GetOperation(int opr) {
            return base.Channel.GetOperation(opr);
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation> GetOperationAsync(int opr) {
            return base.Channel.GetOperationAsync(opr);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Computer[] ListAllComputer() {
            return base.Channel.ListAllComputer();
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Computer[]> ListAllComputerAsync() {
            return base.Channel.ListAllComputerAsync();
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Computer[] ListComputer(System.Nullable<int> firmId) {
            return base.Channel.ListComputer(firmId);
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Computer[]> ListComputerAsync(System.Nullable<int> firmId) {
            return base.Channel.ListComputerAsync(firmId);
        }
        
        public void DeleteComputer(int Id) {
            base.Channel.DeleteComputer(Id);
        }
        
        public System.Threading.Tasks.Task DeleteComputerAsync(int Id) {
            return base.Channel.DeleteComputerAsync(Id);
        }
        
        public void UpdateComputer(MaterialDesignDemo.autocad.masterkey.ws.Computer comp) {
            base.Channel.UpdateComputer(comp);
        }
        
        public System.Threading.Tasks.Task UpdateComputerAsync(MaterialDesignDemo.autocad.masterkey.ws.Computer comp) {
            return base.Channel.UpdateComputerAsync(comp);
        }
        
        public void UpsertOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            base.Channel.UpsertOperation(opr);
        }
        
        public System.Threading.Tasks.Task UpsertOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            return base.Channel.UpsertOperationAsync(opr);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Operation[] ListAllOperation() {
            return base.Channel.ListAllOperation();
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation[]> ListAllOperationAsync() {
            return base.Channel.ListAllOperationAsync();
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.Operation[] ListOperation(int firmid) {
            return base.Channel.ListOperation(firmid);
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.Operation[]> ListOperationAsync(int firmid) {
            return base.Channel.ListOperationAsync(firmid);
        }
        
        public void DeleteOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            base.Channel.DeleteOperation(opr);
        }
        
        public System.Threading.Tasks.Task DeleteOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            return base.Channel.DeleteOperationAsync(opr);
        }
        
        public void UpdateOperation(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            base.Channel.UpdateOperation(opr);
        }
        
        public System.Threading.Tasks.Task UpdateOperationAsync(MaterialDesignDemo.autocad.masterkey.ws.Operation opr) {
            return base.Channel.UpdateOperationAsync(opr);
        }
        
        public void UpsertCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            base.Channel.UpsertCheckLicense(oprdetail);
        }
        
        public System.Threading.Tasks.Task UpsertCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            return base.Channel.UpsertCheckLicenseAsync(oprdetail);
        }
        
        public MaterialDesignDemo.autocad.masterkey.ws.CheckLicense[] ListCheckLicense() {
            return base.Channel.ListCheckLicense();
        }
        
        public System.Threading.Tasks.Task<MaterialDesignDemo.autocad.masterkey.ws.CheckLicense[]> ListCheckLicenseAsync() {
            return base.Channel.ListCheckLicenseAsync();
        }
        
        public void DeleteCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            base.Channel.DeleteCheckLicense(oprdetail);
        }
        
        public System.Threading.Tasks.Task DeleteCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            return base.Channel.DeleteCheckLicenseAsync(oprdetail);
        }
        
        public void UpdateCheckLicense(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            base.Channel.UpdateCheckLicense(oprdetail);
        }
        
        public System.Threading.Tasks.Task UpdateCheckLicenseAsync(MaterialDesignDemo.autocad.masterkey.ws.CheckLicense oprdetail) {
            return base.Channel.UpdateCheckLicenseAsync(oprdetail);
        }
        
        public void DeleteAllComputerBaseFormid(int firmId) {
            base.Channel.DeleteAllComputerBaseFormid(firmId);
        }
        
        public System.Threading.Tasks.Task DeleteAllComputerBaseFormidAsync(int firmId) {
            return base.Channel.DeleteAllComputerBaseFormidAsync(firmId);
        }
    }
}
